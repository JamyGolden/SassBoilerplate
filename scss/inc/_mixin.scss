// ==========================================================================
// List of mixins
// ==========================================================================

 @mixin bp($point) {
	@if $point == xs {
		@content;
	}
	@else if $point == sm {
		@media (min-width: $bp-sm) {
			@content;
		}
	}
	@else if $point == md {
		@media (min-width: $bp-md) {
			@content;
		}
	}
	@else if $point == lg {
		@media (min-width: $bp-lg) {
			@content;
		}
	}
	@else {
		@media (min-width: $point) {
			@content;
		}
	}
}

// Retina Sprite
// https://gist.github.com/JamyGolden/6448466
// Mixin that generates both a regular and retina sprite (using the Compass
// Sprite Helpers) and returns the appropriate declarations and media
// queries.
// The output is equivalent to @include all-spritname-sprites(true), but
// with retina display support.
//
// $folder - The name of the folder that contains the icons to sprite.
// The folder must accompany another folder with the same name, but with an
//  added -retina suffix
// for example:
// folder
// - img
// -- icons
// -- icons-retina
// ==========================================================================

@mixin retina-sprite($folder) {
	// Generates a sprite containing every icon in the supplied folder.
	// Icon spacing 2px included to prevent browser zoom in/out sprite bug
	$sprites: sprite-map("#{$folder}/*.png", $icon-spacing: 2px);
	// Generates a second sprite containing every icon at retina resolution.
	$sprites-retina: sprite-map("#{$folder}-retina/*.png", $icon-spacing: 2px);

	.#{$folder}-sprite {
		@include inline-block();
		text-indent: -9999px;
	}

	.#{$folder} {
		background-image: sprite-url($sprites);
		background-repeat: no-repeat;
	}

	// Create classes for main sprites folder
	@each $sprite in sprite-names($sprites) {
		.#{$folder}-#{$sprite} {
			// Extend the parent class with background properties
			// This will also extend the retina version
			@extend .#{$folder};

			background-position: sprite-position($sprites, $sprite);
			height: image-height(sprite-file($sprites, $sprite));
			width: image-width(sprite-file($sprites, $sprite));
		}
	}

	@media (min-resolution: 2dppx),
	(min-device-pixel-ratio: 2),
	(-o-min-device-pixel-ratio: 2/1),
	(-webkit-min-device-pixel-ratio: 2) {
		.#{$folder} {
			background-image: sprite-url($sprites-retina);
			@include background-size(ceil(image-width(sprite-path($sprites-retina)) / 2) auto);
		}

		@each $sprite in sprite-names($sprites-retina) {
			.#{$folder}-#{$sprite} {
				$pos: sprite-position($sprites-retina, $sprite);
				background-position: nth($pos, 1) nth($pos, 2) / 2;
			}
		}
	}
}